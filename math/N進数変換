#include <iostream>
using namespace std;

/*  関数名      ntodec(const char c)
    説明        サブルーチン1：N進→10進変換 (N≦36)
               char で 文字{0,1,2,...,9,A,B,...,Z} を受け取り、
　　　　　　　　　　　          int で {0,1,2,...9,10,11,...,35}に直して返す。
　　　　　　　　　　　          それ以外の文字が来た場合は-1を返す。
    使用ライブラリ   なし
*/
int ntodec(const char c){
    if(('0' <= c) && (c <= '9')){
        return (int)(c - '0');
    }
    if(('A' <= c) && (c <= 'Z')){
        return (int)(c - '7');
    }
    return -1;
}

/*  関数名          decton(const int n)
    説明   サブルーチン2：10進→N進変換 (N≦36)         
          int で 数値 0〜35 を受け取り、文字{0,1,2,...,9,A,B,...,Z}に直して char で返す。
　　　　　　　　　　　     それ以外の数字が来た場合は \0 を返す。
           使用ライブラリ  なし
*/
char decton(const int n){
    if((0 <= c) && (c <= 9)){
        return (char)(c + '0');
    }
    if((10 <= c) && (c <= 35)){
        return (char)(c + '7');
    }
    default : return '\0';
}

/*  関数名          pow_ll(long long x, long long n)
    説明            サブルーチン3：べき乗計算（long long型）
                    x^n を計算する。long long 対応
    使用ライブラリ  なし
*/
long long pow_ll(long long x, long long n){
    long long ret = x;
    if(n==0) return 1;
    for(long long i=1; i<n; i++){
        ret *= x;
    }
    return ret;
}

/*  関数名          n_ary(string str, int n, int m)
    説明            n 進数で表現された数値を文字列 str で受け取り、m 進数に直して文字列で出力する。
    使用ライブラリ  string
    使用自作関数    ntodec, decton, pow_ll
    制約事項        36進数までの対応。負の値には対応していない。
*/
string n_ary(string str, int n, int m){
    unsigned long tmp = 0;
    string ret;

    for(int i=0; i<str.length(); i++){
        tmp += (unsigned long) ntodec(str[str.length()-1-i]) * pow_ll(n, i);
    }

    if(tmp==0) return "0";
    while(tmp!=0){
        ret = decton(tmp%m) + ret;
        tmp/=m;
    }
    return ret;
}


int main(){
  string N;
  int K;
  cin >> N >> K;
  string temp;
  for(int i = 1; i<=K; ++i){
        N =  n_ary(N, 8, 9);
        
  }
  

}
